{"version":3,"sources":["components/MediumCategoryChip.tsx","components/MediumCategoryChips.tsx","components/MediumArticleCard.tsx","components/MediumArticles.tsx","components/MediumAvatar.tsx","components/MediumHeader.tsx","components/ChangeUser.tsx","services/medium-feed.ts","Main.tsx","reportWebVitals.ts","index.tsx"],"names":["MediumCategoryChip","category","className","MediumCategoryChips","categories","map","index","MediumArticleCard","article","href","link","target","rel","style","backgroundImage","thumbnail","title","userLink","author","Date","pubDate","toLocaleDateString","MediumArticles","articles","MediumAvatar","image","src","alt","MediumHeader","ChangeUser","username","onChange","useState","user","setUser","defaultValue","value","onClick","fetchMediumFeed","a","mediumUrl","fetch","json","getRssFeed","maxArticles","feed","items","status","alert","filter","item","slice","Main","hideHeader","rssFeed","setRssFeed","useEffect","fetchRssFeed","then","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20a1744f.chunk.js","sourcesContent":["import { FC } from \"react\";\nimport \"./MediumCategoryChip.css\";\n\ninterface MediumCategoryChipProps {\n  category: string;\n}\n\nexport const MediumCategoryChip: FC<MediumCategoryChipProps> = ({\n  category,\n}) => {\n  return <div className=\"chip card-category\">{category}</div>;\n};\n","import { FC } from \"react\";\nimport { MediumCategoryChip } from \"./MediumCategoryChip\";\n\ninterface MediumCategoryChipsProps {\n  categories: string[];\n}\n\nexport const MediumCategoryChips: FC<MediumCategoryChipsProps> = ({\n  categories,\n}) => {\n  return (\n    <div className=\"chips\">\n      {categories.map((category, index) => (\n        <MediumCategoryChip category={category} key={index} />\n      ))}\n    </div>\n  );\n};\n","import { FC } from \"react\";\nimport { Article } from \"../services/medium-feed\";\nimport { MediumCategoryChips } from \"./MediumCategoryChips\";\n\nimport \"./MediumArticleCard.css\";\n\ninterface MediumArticleCardProps {\n  article: Article;\n}\n\nexport const MediumArticleCard: FC<MediumArticleCardProps> = ({ article }) => {\n  return (\n    <article className=\"card card--1\">\n      <div className=\"card-img\"></div>\n      <a\n        href={article.link}\n        target=\"_blank\"\n        className=\"card_link\"\n        rel=\"noreferrer\"\n      >\n        <div\n          className=\"card-img--hover\"\n          style={{ backgroundImage: `url('${article.thumbnail}')` }}\n        ></div>\n      </a>\n      <div className=\"card-info\">\n        <div className=\"card-title\">\n          <a target=\"_blank\" href={article.link} rel=\"noreferrer\">\n            {article.title}\n          </a>\n        </div>\n\n        <MediumCategoryChips categories={article.categories} />\n\n        <div className=\"card-footer\">\n          <span>by</span>\n          <a\n            target=\"_blank\"\n            href={article.userLink}\n            className=\"card-author\"\n            rel=\"noreferrer\"\n            title=\"author\"\n          >\n            {article.author}\n          </a>\n          <span className=\"card-date\">\n            {new Date(article.pubDate).toLocaleDateString()}\n          </span>\n        </div>\n      </div>\n    </article>\n  );\n};\n","import { FC } from \"react\";\nimport { Article } from \"../services/medium-feed\";\nimport \"./MediumArticles.css\";\nimport { MediumArticleCard } from \"./MediumArticleCard\";\n\ninterface MediumArticlesProps {\n  articles: Article[];\n}\n\nexport const MediumArticles: FC<MediumArticlesProps> = ({ articles }) => {\n  return (\n    <section className=\"cards\">\n      {articles.map((article, index) => (\n        <MediumArticleCard article={article} key={index} />\n      ))}\n    </section>\n  );\n};\n","import { FC } from \"react\";\nimport \"./MediumAvatar.css\";\n\ninterface MediumAvatarProps {\n  image: string;\n}\n\nexport const MediumAvatar: FC<MediumAvatarProps> = ({ image }) => {\n  return <img className=\"avatar\" src={image} alt=\"avatar\" />;\n};\n","import { FC } from \"react\";\nimport { MediumAvatar } from \"./MediumAvatar\";\nimport \"./MediumHeader.css\";\n\ninterface MediumHeaderProps {\n  title: string;\n  image: string;\n}\n\nexport const MediumHeader: FC<MediumHeaderProps> = ({ title, image }) => {\n  return (\n    <div className=\"header\">\n      <h1>{title}</h1>\n      <MediumAvatar image={image} />\n    </div>\n  );\n};\n","import { FC, useState } from \"react\";\nimport \"./ChangeUser.css\";\n\ninterface ChangeUserProps {\n  username: string;\n  onChange: (username: string) => void;\n}\n\nexport const ChangeUser: FC<ChangeUserProps> = ({ username, onChange }) => {\n  const [user, setUser] = useState(username);\n\n  const onSubmit = () => onChange(user);\n  return (\n    <div className=\"change-user\">\n      <input\n        defaultValue={username}\n        onChange={(value) => setUser(value.target.value)}\n      />\n      <button onClick={onSubmit}>Change username</button>\n    </div>\n  );\n};\n","export interface Article {\n  title: string;\n  thumbnail: string;\n  categories: string[];\n  author: string;\n  pubDate: string;\n  userLink: string;\n  link: string;\n}\n\nexport interface Feed {\n  title: string;\n  image: string;\n  link: string;\n}\n\nexport interface RssFeed {\n  articles: Article[];\n  feed: Feed;\n}\n\nexport interface RssFeedResult {\n  items: Article[];\n  status: string;\n  feed: Feed;\n}\n\nasync function fetchMediumFeed(username: string): Promise<RssFeedResult> {\n  let mediumUrl = `https://medium.com/feed/@${username}`;\n  return (\n    await fetch(`https://api.rss2json.com/v1/api.json?rss_url=${mediumUrl}`)\n  ).json();\n}\n\nexport async function getRssFeed(\n  username = \"mariusbongarts11\",\n  maxArticles: number\n): Promise<RssFeed | null> {\n  const { feed, items, status } = await fetchMediumFeed(username);\n\n  if (!feed || status !== \"ok\") {\n    alert(\"Pass a valid medium username.\");\n    return null;\n  }\n  const articles = items\n    ?.filter((item) => item.thumbnail)\n    .slice(0, maxArticles)\n    .map((item) => {\n      return {\n        ...item,\n        userLink: feed.link,\n      };\n    });\n\n  return { feed, articles };\n}\n","import { FC, useEffect, useState } from \"react\";\nimport \"./Main.css\";\nimport { MediumArticles } from \"./components/MediumArticles\";\nimport { MediumHeader } from \"./components/MediumHeader\";\nimport { ChangeUser } from \"./components/ChangeUser\";\nimport { getRssFeed, RssFeed } from \"./services/medium-feed\";\n\ninterface MainProps {\n  username: string;\n  hideHeader?: boolean;\n  maxArticles?: number;\n}\n\nconst DEFAULT_MAX_ARTICLES = 10;\n\nexport const Main: FC<MainProps> = ({ username, hideHeader, maxArticles }) => {\n  const [user, setUser] = useState(username);\n  const [rssFeed, setRssFeed] = useState<RssFeed>();\n\n  useEffect(() => {\n    const fetchRssFeed = async () =>\n      getRssFeed(user, maxArticles ?? DEFAULT_MAX_ARTICLES);\n\n    fetchRssFeed().then((rssFeed) => rssFeed && setRssFeed(rssFeed));\n  }, [user, maxArticles]);\n\n  if (!rssFeed) return <span>Loading...</span>;\n\n  return (\n    <>\n      <ChangeUser\n        username={username}\n        onChange={(username) => setUser(username)}\n      />\n      <div id=\"medium-portfolio-app\">\n        {!hideHeader && (\n          <MediumHeader title={rssFeed.feed.title} image={rssFeed.feed.image} />\n        )}\n        <MediumArticles articles={rssFeed.articles} />\n      </div>\n    </>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Main } from \"./Main\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main username=\"mariusbongarts11\" />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}